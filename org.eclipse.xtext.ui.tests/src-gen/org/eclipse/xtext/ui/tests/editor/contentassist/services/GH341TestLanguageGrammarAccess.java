/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.editor.contentassist.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GH341TestLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementsAlternatives_0 = (Alternatives)cElementsAssignment.eContents().get(0);
		private final RuleCall cElementsWorksParserRuleCall_0_0 = (RuleCall)cElementsAlternatives_0.eContents().get(0);
		private final RuleCall cElementsBrokenParserRuleCall_0_1 = (RuleCall)cElementsAlternatives_0.eContents().get(1);
		private final RuleCall cElementsThirdParserRuleCall_0_2 = (RuleCall)cElementsAlternatives_0.eContents().get(2);
		
		//Model:
		//	elements+=(Works | Broken | Third)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=(Works | Broken | Third)*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//(Works | Broken | Third)
		public Alternatives getElementsAlternatives_0() { return cElementsAlternatives_0; }
		
		//Works
		public RuleCall getElementsWorksParserRuleCall_0_0() { return cElementsWorksParserRuleCall_0_0; }
		
		//Broken
		public RuleCall getElementsBrokenParserRuleCall_0_1() { return cElementsBrokenParserRuleCall_0_1; }
		
		//Third
		public RuleCall getElementsThirdParserRuleCall_0_2() { return cElementsThirdParserRuleCall_0_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorksParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBrokenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThirdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Element:
		//	Works | Broken | Third;
		@Override public ParserRule getRule() { return rule; }
		
		//Works | Broken | Third
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Works
		public RuleCall getWorksParserRuleCall_0() { return cWorksParserRuleCall_0; }
		
		//Broken
		public RuleCall getBrokenParserRuleCall_1() { return cBrokenParserRuleCall_1; }
		
		//Third
		public RuleCall getThirdParserRuleCall_2() { return cThirdParserRuleCall_2; }
	}
	public class WorksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Works");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdsIDTerminalRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRefsWorksCrossReference_3_0_0 = (CrossReference)cRefsAssignment_3_0.eContents().get(0);
		private final RuleCall cRefsWorksIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRefsWorksCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRefsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cRefsWorksCrossReference_3_1_1_0 = (CrossReference)cRefsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRefsWorksIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cRefsWorksCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cXKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Works:
		//	"works" name=ID (ids+=ID ("." ids+=ID)* ";")* (refs+=[Works] ("." refs+=[Works])* "X" ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"works" name=ID (ids+=ID ("." ids+=ID)* ";")* (refs+=[Works] ("." refs+=[Works])* "X" ";")*
		public Group getGroup() { return cGroup; }
		
		//"works"
		public Keyword getWorksKeyword_0() { return cWorksKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(ids+=ID ("." ids+=ID)* ";")*
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=ID
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_0_0() { return cIdsIDTerminalRuleCall_2_0_0; }
		
		//("." ids+=ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"."
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_1_1_0() { return cIdsIDTerminalRuleCall_2_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
		
		//(refs+=[Works] ("." refs+=[Works])* "X" ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//refs+=[Works]
		public Assignment getRefsAssignment_3_0() { return cRefsAssignment_3_0; }
		
		//[Works]
		public CrossReference getRefsWorksCrossReference_3_0_0() { return cRefsWorksCrossReference_3_0_0; }
		
		//ID
		public RuleCall getRefsWorksIDTerminalRuleCall_3_0_0_1() { return cRefsWorksIDTerminalRuleCall_3_0_0_1; }
		
		//("." refs+=[Works])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"."
		public Keyword getFullStopKeyword_3_1_0() { return cFullStopKeyword_3_1_0; }
		
		//refs+=[Works]
		public Assignment getRefsAssignment_3_1_1() { return cRefsAssignment_3_1_1; }
		
		//[Works]
		public CrossReference getRefsWorksCrossReference_3_1_1_0() { return cRefsWorksCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getRefsWorksIDTerminalRuleCall_3_1_1_0_1() { return cRefsWorksIDTerminalRuleCall_3_1_1_0_1; }
		
		//"X"
		public Keyword getXKeyword_3_2() { return cXKeyword_3_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
	}
	public class BrokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Broken");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cFragmentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRefsBrokenCrossReference_3_0_0 = (CrossReference)cRefsAssignment_3_0.eContents().get(0);
		private final RuleCall cRefsBrokenIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRefsBrokenCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRefsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cRefsBrokenCrossReference_3_1_1_0 = (CrossReference)cRefsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cRefsBrokenIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cRefsBrokenCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cXKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Broken:
		//	"broken" name=ID Fragment (refs+=[Broken] ("." refs+=[Broken])* "X" ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"broken" name=ID Fragment (refs+=[Broken] ("." refs+=[Broken])* "X" ";")*
		public Group getGroup() { return cGroup; }
		
		//"broken"
		public Keyword getBrokenKeyword_0() { return cBrokenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//Fragment
		public RuleCall getFragmentParserRuleCall_2() { return cFragmentParserRuleCall_2; }
		
		//(refs+=[Broken] ("." refs+=[Broken])* "X" ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//refs+=[Broken]
		public Assignment getRefsAssignment_3_0() { return cRefsAssignment_3_0; }
		
		//[Broken]
		public CrossReference getRefsBrokenCrossReference_3_0_0() { return cRefsBrokenCrossReference_3_0_0; }
		
		//ID
		public RuleCall getRefsBrokenIDTerminalRuleCall_3_0_0_1() { return cRefsBrokenIDTerminalRuleCall_3_0_0_1; }
		
		//("." refs+=[Broken])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//"."
		public Keyword getFullStopKeyword_3_1_0() { return cFullStopKeyword_3_1_0; }
		
		//refs+=[Broken]
		public Assignment getRefsAssignment_3_1_1() { return cRefsAssignment_3_1_1; }
		
		//[Broken]
		public CrossReference getRefsBrokenCrossReference_3_1_1_0() { return cRefsBrokenCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getRefsBrokenIDTerminalRuleCall_3_1_1_0_1() { return cRefsBrokenIDTerminalRuleCall_3_1_1_0_1; }
		
		//"X"
		public Keyword getXKeyword_3_2() { return cXKeyword_3_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }
	}
	public class ThirdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Third");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEFINEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSTREAMParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Third:
		//	DEFINE STREAM name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//DEFINE STREAM name=ID
		public Group getGroup() { return cGroup; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_0() { return cDEFINEParserRuleCall_0; }
		
		//STREAM
		public RuleCall getSTREAMParserRuleCall_1() { return cSTREAMParserRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class STREAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.STREAM");
		private final Keyword cStreamKeyword = (Keyword)rule.eContents().get(0);
		
		//fragment STREAM *:
		//	'stream';
		@Override public ParserRule getRule() { return rule; }
		
		//'stream'
		public Keyword getStreamKeyword() { return cStreamKeyword; }
	}
	public class DEFINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.DEFINE");
		private final Keyword cDefineKeyword = (Keyword)rule.eContents().get(0);
		
		//fragment DEFINE *:
		//	'define';
		@Override public ParserRule getRule() { return rule; }
		
		//'define'
		public Keyword getDefineKeyword() { return cDefineKeyword; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsIDTerminalRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment Fragment *:
		//	(ids+=ID ("." ids+=ID)* ";")*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ids+=ID ("." ids+=ID)* ";")*
		public Group getGroup() { return cGroup; }
		
		//ids+=ID
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_0_0() { return cIdsIDTerminalRuleCall_0_0; }
		
		//("." ids+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_1_1_0() { return cIdsIDTerminalRuleCall_1_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final WorksElements pWorks;
	private final BrokenElements pBroken;
	private final ThirdElements pThird;
	private final STREAMElements pSTREAM;
	private final DEFINEElements pDEFINE;
	private final FragmentElements pFragment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GH341TestLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pWorks = new WorksElements();
		this.pBroken = new BrokenElements();
		this.pThird = new ThirdElements();
		this.pSTREAM = new STREAMElements();
		this.pDEFINE = new DEFINEElements();
		this.pFragment = new FragmentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.ui.tests.editor.contentassist.GH341TestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=(Works | Broken | Third)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//	Works | Broken | Third;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Works:
	//	"works" name=ID (ids+=ID ("." ids+=ID)* ";")* (refs+=[Works] ("." refs+=[Works])* "X" ";")*;
	public WorksElements getWorksAccess() {
		return pWorks;
	}
	
	public ParserRule getWorksRule() {
		return getWorksAccess().getRule();
	}
	
	//Broken:
	//	"broken" name=ID Fragment (refs+=[Broken] ("." refs+=[Broken])* "X" ";")*;
	public BrokenElements getBrokenAccess() {
		return pBroken;
	}
	
	public ParserRule getBrokenRule() {
		return getBrokenAccess().getRule();
	}
	
	//Third:
	//	DEFINE STREAM name=ID;
	public ThirdElements getThirdAccess() {
		return pThird;
	}
	
	public ParserRule getThirdRule() {
		return getThirdAccess().getRule();
	}
	
	//fragment STREAM *:
	//	'stream';
	public STREAMElements getSTREAMAccess() {
		return pSTREAM;
	}
	
	public ParserRule getSTREAMRule() {
		return getSTREAMAccess().getRule();
	}
	
	//fragment DEFINE *:
	//	'define';
	public DEFINEElements getDEFINEAccess() {
		return pDEFINE;
	}
	
	public ParserRule getDEFINERule() {
		return getDEFINEAccess().getRule();
	}
	
	//fragment Fragment *:
	//	(ids+=ID ("." ids+=ID)* ";")*;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
