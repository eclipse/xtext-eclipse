/*******************************************************************************
 * Copyright (c) 2017 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
grammar org.eclipse.xtext.ui.tests.editor.contentassist.ParameterizedExpressionsTestLanguage with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT) 

generate parameterizedExpressionsTestLanguage "http://www.eclipse.org/2017/tmf/xtext/parameterizedExpressions"

RootStatement <Yield> returns Statement:
	  Block<Yield>
	| FunctionDeclaration<Yield>
	| LabelledStatement<Yield>
	| ExpressionStatement<Yield>
;

FunctionDeclaration <Yield>:
	=> ({FunctionDeclaration}
		-> FunctionImpl <Yield,Yield,Expression=false>
	) => ';'?
;

fragment FunctionImpl<Yield, YieldIfGenerator, Expression>*:
	'function'
	(
		generator?='*' FunctionHeader<YieldIfGenerator,Generator=true> FunctionBody<Yield=true,Expression>
	| 	FunctionHeader<Yield,Generator=false> FunctionBody<Yield=false,Expression>
	)
;

fragment FunctionHeader<Yield, Generator>*:
	name=Identifier<Yield>?
	'('')'
;

fragment FunctionBody <Yield, Expression>*:
		<Expression> body=Block<Yield>
	|	<!Expression> body=Block<Yield>?
;

Block <Yield>: => ({Block} '{') statements+=Statement<Yield>* '}';

Statement <Yield>:
	  FunctionDeclaration<Yield>
	| RootStatement<Yield>
;

ExpressionStatement <Yield>:
	expression=Expression<In=true,Yield> ';'
;

LabelledStatement <Yield>: => (name=Identifier<Yield> ':') statement=Statement<Yield>;

PrimaryExpression <Yield> returns Expression:
	  IdentifierRef<Yield>
;

IdentifierRef <Yield>:
	id=Identifier<Yield>
;

MemberExpression <Yield> returns Expression:
	PrimaryExpression<Yield> (
		  {IndexedAccessExpression.target=current} IndexedAccessExpressionTail<Yield>
		| {ParameterizedPropertyAccessExpression.target=current} ParameterizedPropertyAccessExpressionTail<Yield>
		)*
;

fragment IndexedAccessExpressionTail <Yield>*:
	'[' index=Expression<In=true,Yield> ']'
;

fragment ParameterizedPropertyAccessExpressionTail <Yield>*:
	'.' property=Identifier<Yield>
;

ShiftExpression <Yield> returns Expression: MemberExpression<Yield>
	(=>({ShiftExpression.lhs=current} op=('>>'|'<<') rhs=MemberExpression<Yield>))*
;

RelationalExpression <In, Yield> returns Expression: ShiftExpression<Yield>
	=>({RelationalExpression.lhs=current} op=RelationalOperator<In> ->rhs=ShiftExpression<Yield>)*;

RelationalOperator <In> :
	'<' | '>' | '<=' | '>=' | 'instanceof' | <In> 'in';

AssignmentExpression <In, Yield> returns Expression:
	<Yield> YieldExpression<In>
	| RelationalExpression<In,Yield> (=> ({AssignmentExpression.lhs=current} op='=') rhs=AssignmentExpression<In,Yield>)?
;

YieldExpression <In> returns Expression:
	{YieldExpression} 'yield' => many?='*'? -> expression=AssignmentExpression<In,Yield=true>?
;

Expression <In, Yield>:
	AssignmentExpression<In,Yield> ({CommaExpression.exprs+=current} ',' exprs+=AssignmentExpression<In,Yield> (','	exprs+=AssignmentExpression<In,Yield>)*)?
;

Identifier <Yield>:
	ID | <!Yield> 'yield'
;