/*
 * generated by Xtext
 */
package org.eclipse.xtext.ui.tests.quickfix.validation;

import org.eclipse.xtext.ui.tests.quickfix.quickfixCrossref.Element;
import org.eclipse.xtext.ui.tests.quickfix.quickfixCrossref.QuickfixCrossrefPackage;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class QuickfixCrossrefTestLanguageValidator extends AbstractQuickfixCrossrefTestLanguageValidator {
	
	public static final String TRIGGER_VALIDATION_ISSUE = "triggerValidationIssue";
	public static final String MULTIFIXABLE_ISSUE = "multiFixableIssue";
	public static final String MULTIFIXABLE_ISSUE_2 = "multiFixableIssue2";
		
	public static final String ISSUE_DATA_0 = "data0";
	
	public static final String ISSUE_DATA_1 = "data1";

	@Check(CheckType.FAST)
	public void checkAndPopulateIssueData(Element element) {
		if(element.getName().equals(TRIGGER_VALIDATION_ISSUE)) {
			error(
					TRIGGER_VALIDATION_ISSUE, 
					element, 
					QuickfixCrossrefPackage.Literals.ELEMENT__NAME,
					ValidationMessageAcceptor.INSIGNIFICANT_INDEX,
					TRIGGER_VALIDATION_ISSUE, 
					ISSUE_DATA_0, 
					ISSUE_DATA_1);
		}
	}

	@Check(CheckType.FAST)
	public void checkDocumentation(Element element) {
		if (element.getDoc().equals("no doc")) {
			warning(MULTIFIXABLE_ISSUE, element, QuickfixCrossrefPackage.Literals.ELEMENT__DOC,
					ValidationMessageAcceptor.INSIGNIFICANT_INDEX, MULTIFIXABLE_ISSUE);
		}
	}

	@Check(CheckType.FAST)
	public void checkDocumentation2(Element element) {
		if (element.getDoc().equals("bad doc")) {
			warning(MULTIFIXABLE_ISSUE_2, element, QuickfixCrossrefPackage.Literals.ELEMENT__DOC,
					ValidationMessageAcceptor.INSIGNIFICANT_INDEX, MULTIFIXABLE_ISSUE_2);
		}
	}
}
