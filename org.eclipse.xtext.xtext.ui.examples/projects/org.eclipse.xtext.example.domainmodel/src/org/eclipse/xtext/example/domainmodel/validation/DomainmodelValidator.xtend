/*
 * generated by Xtext
 */
package org.eclipse.xtext.example.domainmodel.validation

import org.eclipse.xtext.example.domainmodel.domainmodel.DomainmodelPackage
import org.eclipse.xtext.example.domainmodel.domainmodel.Entity
import org.eclipse.xtext.example.domainmodel.domainmodel.Feature
import org.eclipse.xtext.example.domainmodel.domainmodel.PackageDeclaration
import org.eclipse.xtext.util.Strings
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.ValidationMessageAcceptor

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DomainmodelValidator extends AbstractDomainmodelValidator {
	
	@Check def void checkTypeNameStartsWithCapital(Entity entity) {
		if (!Character::isUpperCase(entity.getName().charAt(0))) {
			warning("Name should start with a capital", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME,
				ValidationMessageAcceptor::INSIGNIFICANT_INDEX, IssueCodes::INVALID_TYPE_NAME, entity.getName())
		}
	}

	@Check def void checkFeatureNameStartsWithLowercase(Feature feature) {
		if (!Character::isLowerCase(feature.getName().charAt(0))) {
			warning("Name should start with a lowercase", DomainmodelPackage.Literals::FEATURE__NAME,
				ValidationMessageAcceptor::INSIGNIFICANT_INDEX, IssueCodes::INVALID_FEATURE_NAME, feature.getName())
		}
	}

	@Check def void checkPackage(PackageDeclaration packages) {
		if (Strings::isEmpty(packages.getName())) {
			error("Name cannot be empty", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME)
		}
		if (packages.getName().equals("java")) {
			error("Invalid package name", DomainmodelPackage.Literals::ABSTRACT_ELEMENT__NAME)
		}
	}
	
}
