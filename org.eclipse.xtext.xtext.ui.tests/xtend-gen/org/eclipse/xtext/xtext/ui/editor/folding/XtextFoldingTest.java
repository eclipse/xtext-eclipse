/**
 * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.xtext.xtext.ui.editor.folding;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.ui.testing.AbstractFoldingTest;
import org.eclipse.xtext.xtext.ui.XtextUiInjectorProvider;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * @author miklossy - Initial contribution and API
 */
@RunWith(XtextRunner.class)
@InjectWith(XtextUiInjectorProvider.class)
@SuppressWarnings("all")
public class XtextFoldingTest extends AbstractFoldingTest {
  @Test
  public void greetings() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals");
    _builder.newLine();
    _builder.newLine();
    _builder.append("generate myDsl \"http://www.xtext.org/example/mydsl/MyDsl\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Model:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("greetings+=Greeting*;<]");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("[>Greeting:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'Hello\' name=ID \'!\';<]");
    _builder.newLine();
    this.testFoldingRegions(_builder);
  }
  
  @Test
  public void arithmetics() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[>/*******************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2015, 2017 itemis AG (http://www.itemis.eu) and others.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This program and the accompanying materials are made available under the");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* terms of the Eclipse Public License 2.0 which is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-2.0.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* SPDX-License-Identifier: EPL-2.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*******************************************************************************/<]");
    _builder.newLine();
    _builder.append("grammar org.eclipse.xtext.example.arithmetics.Arithmetics with org.eclipse.xtext.common.Terminals");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/emf/2002/Ecore\" as ecore");
    _builder.newLine();
    _builder.append("generate arithmetics \"http://www.eclipse.org/Xtext/example/Arithmetics\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Module:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'module\' name=ID");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(imports+=Import)*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(statements+=Statement)*;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Import:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'import\' module=[Module];<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Statement:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Definition | Evaluation;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Definition:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'def\' name=ID (\'(\' args+=DeclaredParameter (\',\' args+=DeclaredParameter)* \')\')?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\':\' expr=Expression \';\';<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>DeclaredParameter:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=ID;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>AbstractDefinition:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Definition | DeclaredParameter;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Evaluation:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("expression=Expression \';\';<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Expression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Addition;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Addition returns Expression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multiplication (({Plus.left=current} \'+\' | {Minus.left=current} \'-\') right=Multiplication)*;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Multiplication returns Expression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PrimaryExpression (({Multi.left=current} \'*\' | {Div.left=current} \'/\') right=PrimaryExpression)*;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>PrimaryExpression returns Expression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'(\' Expression \')\' |");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{NumberLiteral} value=NUMBER |");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{FunctionCall} func=[AbstractDefinition] (\'(\' args+=Expression (\',\' args+=Expression)* \')\')?;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>terminal NUMBER returns ecore::EBigDecimal:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(\'0\'..\'9\')* (\'.\' (\'0\'..\'9\')+)?;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>@Override");
    _builder.newLine();
    _builder.append("terminal INT returns ecore::EInt:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'this one has been deactivated\';<]");
    _builder.newLine();
    this.testFoldingRegions(_builder);
  }
  
  @Test
  public void domainmodel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[>/*******************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2009, 2017 itemis AG (http://www.itemis.eu) and others.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This program and the accompanying materials are made available under the");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* terms of the Eclipse Public License 2.0 which is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-2.0.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* SPDX-License-Identifier: EPL-2.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*******************************************************************************/<]");
    _builder.newLine();
    _builder.append("grammar org.eclipse.xtext.example.domainmodel.Domainmodel with org.eclipse.xtext.xbase.Xbase");
    _builder.newLine();
    _builder.newLine();
    _builder.append("generate domainmodel \"http://www.xtext.org/example/Domainmodel\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>DomainModel:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("importSection=XImportSection?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("elements+=AbstractElement*;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>AbstractElement:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PackageDeclaration | Entity;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>PackageDeclaration:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'package\' name=QualifiedName \'{\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("elements+=AbstractElement*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'}\';<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Entity:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'entity\' name=ValidID (\'extends\' superType=JvmParameterizedTypeReference)? \'{\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("features+=Feature*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'}\';<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Feature:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Property | Operation;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Property:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=ValidID \':\' type=JvmTypeReference;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Operation:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'op\' name=ValidID \'(\' (params+=FullJvmFormalParameter (\',\' params+=FullJvmFormalParameter)*)? \')\' (\':\' type=JvmTypeReference)?");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("body=XBlockExpression;<]");
    _builder.newLine();
    this.testFoldingRegions(_builder);
  }
  
  @Test
  public void homeautomation() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[>/*******************************************************************************");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Copyright (c) 2015, 2017 itemis AG (http://www.itemis.eu) and others.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This program and the accompanying materials are made available under the");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* terms of the Eclipse Public License 2.0 which is available at");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* http://www.eclipse.org/legal/epl-2.0.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* SPDX-License-Identifier: EPL-2.0");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*******************************************************************************/<]");
    _builder.newLine();
    _builder.append("grammar org.eclipse.xtext.example.homeautomation.RuleEngine with org.eclipse.xtext.xbase.Xbase");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import \"http://www.eclipse.org/xtext/xbase/Xbase\" as xbase");
    _builder.newLine();
    _builder.append("generate ruleEngine \"http://www.eclipse.org/Xtext/example/RuleEngine\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Model:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("declarations+=Declaration*;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Declaration:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Device | Rule;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Device:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'Device\' name=ID \'can\' \'be\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(states+=State (\',\' states+=State)*)?;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>State:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=ID ;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Rule:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'Rule\' description=STRING");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'when\' deviceState=[State|QualifiedName]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\'then\' thenPart=XBlockExpression;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// We modify the concrete syntax of two Xbase expressions and make them indentation-aware");
    _builder.newLine();
    _builder.append("[>@Override");
    _builder.newLine();
    _builder.append("XBlockExpression returns xbase::XExpression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{xbase::XBlockExpression}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BEGIN");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(expressions+=XExpressionOrVarDeclaration \';\'?)*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("END;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>@Override");
    _builder.newLine();
    _builder.append("XSwitchExpression returns xbase::XExpression:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{xbase::XSwitchExpression}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'switch\' (=>(\'(\' declaredParam=JvmFormalParameter \':\') switch=XExpression \')\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("| =>(declaredParam=JvmFormalParameter \':\')? switch=XExpression)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BEGIN");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(cases+=XCasePart)*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(\'default\' \':\' default=XExpression )?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("END;<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// The following synthetic tokens are used for the indentation-aware blocks");
    _builder.newLine();
    _builder.append("terminal BEGIN: \'synthetic:BEGIN\';  // increase indentation");
    _builder.newLine();
    _builder.append("terminal END: \'synthetic:END\';      // decrease indentation");
    _builder.newLine();
    this.testFoldingRegions(_builder);
  }
  
  @Test
  public void statemachine() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("grammar org.eclipse.xtext.example.fowlerdsl.Statemachine with org.eclipse.xtext.common.Terminals");
    _builder.newLine();
    _builder.newLine();
    _builder.append("generate statemachine \"http://www.eclipse.org/xtext/example/fowlerdsl/Statemachine\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Statemachine :");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{Statemachine}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(\'events\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("events+=Event+");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'end\')?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(\'resetEvents\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("resetEvents+=[Event]+");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'end\')?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(\'commands\'");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("commands+=Command+");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'end\')?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("states+=State*");
    _builder.newLine();
    _builder.append(";<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Event:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=ID code=ID");
    _builder.newLine();
    _builder.append(";<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Command:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("name=ID code=ID");
    _builder.newLine();
    _builder.append(";<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>State:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'state\' name=ID");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("(\'actions\' \'{\' actions+=[Command]+ \'}\')?");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("transitions+=Transition*");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\'end\'");
    _builder.newLine();
    _builder.append(";<]");
    _builder.newLine();
    _builder.newLine();
    _builder.append("[>Transition:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("event=[Event] \'=>\' state=[State]");
    _builder.newLine();
    _builder.append(";<]");
    _builder.newLine();
    this.testFoldingRegions(_builder);
  }
}
