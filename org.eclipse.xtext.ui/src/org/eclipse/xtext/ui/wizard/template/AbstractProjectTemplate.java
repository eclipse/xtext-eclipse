/*******************************************************************************
 * Copyright (c) 2017 itemis AG (http://www.itemis.de) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.xtext.ui.wizard.template;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.IStatus;

/**
 * A template definition for a project, used by the new project wizard. Defines the UI (label, description, icon, variables) on how to
 * present the template to the user and a list or ProjectFile elements to be generated by the wizard when the template is selected. The
 * ProjectFile's can contain references to ProjectVariable's to allow the user to configure the generated code.
 * 
 * Instances of this class are generated from classes annotated with @ProjectTemplate.
 * 
 * @author Arne Deutsch - Initial contribution and API
 */
public abstract class AbstractProjectTemplate {

	private static final Logger logger = Logger.getLogger(AbstractProjectTemplate.class);

	private List<ProjectVariable> variables;

	protected final StringProjectVariable text(String name, String defaultValue, String description) {
		return new StringProjectVariable(name, defaultValue, description);
	}

	protected final BooleanProjectVariable check(String name, boolean defaultValue, String description) {
		return new BooleanProjectVariable(name, defaultValue, description);
	}

	protected final StringSelectionProjectVariable combo(String name, String[] possibleValues, String description) {
		return new StringSelectionProjectVariable(name, possibleValues, description);
	}

	/**
	 * @return The label read from the @Template annotation.
	 */
	public final String getLabel() {
		return getProjectTemplateAnnotation().label();
	}

	/**
	 * @return The icon read from the @Template annotation.
	 */
	public final String getIcon() {
		return getProjectTemplateAnnotation().icon();
	}

	/**
	 * @return The description read from the @Template annotation.
	 */
	public final String getDescription() {
		return getProjectTemplateAnnotation().description();
	}

	/**
	 * @return The variables read reflectively from this class.
	 */
	public final List<ProjectVariable> getVariables() {
		if (variables == null) {
			// lazy initialization because initialization in constructor would initialize lists with null's because field initialization
			// comes after constructor initialization of super class
			variables = new ArrayList<>();
			Class<? extends Object> projectTemplateClass = getClass();
			for (Field field : projectTemplateClass.getDeclaredFields()) {
				if (ProjectVariable.class.isAssignableFrom(field.getType())) {
					try {
						field.setAccessible(true);
						variables.add((ProjectVariable) field.get(this));
					} catch (IllegalArgumentException | IllegalAccessException e) {
						logger.error("Can not create project variable for '" + field.getName() + "'", e);
					}
				}
			}
			variables = Collections.unmodifiableList(variables);
		}
		return variables;
	}

	/**
	 * Subclasses have to override. Generate all the files to be created when the wizard is finished.
	 */
	abstract public void generateFiles(IProjectFileGenerator generator);

	/**
	 * Subclasses should override to validate the variables. If everything is ok Status.OK_STATUS or null should be returned. Otherwise an
	 * ERROR or WARNING Status might be returned whereas the message is displayed to the user.
	 */
	protected IStatus validate() {
		return null;
	}

	/**
	 * Subclasses should override. The method is called after each change of a variable value through the user. It can be used to
	 * enable/disable variables (calling #setEnabled(String,boolean)) in the UI or change values further in reaction to a user change. Does
	 * nothing by default.
	 */
	protected void updateVariables() {
	}

	private ProjectTemplate getProjectTemplateAnnotation() {
		Class<? extends Object> projectTemplateClass = getClass();
		ProjectTemplate projectTemplateAnnotation = projectTemplateClass.getAnnotation(ProjectTemplate.class);
		if (projectTemplateAnnotation == null)
			throw new RuntimeException("Template class '" + projectTemplateClass.getName() + "' does not declare a '"
					+ ProjectTemplate.class.getName() + "' annotation");
		return projectTemplateAnnotation;
	}

}
